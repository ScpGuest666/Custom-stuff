-- Create Main ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
screenGui.ResetOnSpawn = false

-- Create Main Frame (GUI 1)
local frame = Instance.new("Frame")
frame.Parent = screenGui
frame.BackgroundColor3 = Color3.fromRGB(180, 180, 180)
frame.Size = UDim2.new(0, 200, 0, 150)
frame.Position = UDim2.new(0.5, -100, 0.5, -75)
frame.Active = true
frame.Draggable = true

-- Platform Variables
local movablePlatform = nil

-- Additional GUI Variables
local additionalGuiInstance = nil
local additionalFrame = nil
local platformScrollingFrame = nil
local uiListLayout = nil
local uiListLayoutConnection = nil
local positionConnection = nil

-- Red Platform Variables
local redPlatforms = {}  -- Table: { part, billboardGui, weld, number, wasWelded, isDetached, hitPartDestroyConn, arrowPart (optional) }
local redPlatformBaseOffset = Vector3.new(0, -3, 0) -- Spawn below feet (fallback if no surface hit)
local redPlatformNumberOffset = Vector3.new(0, 1.5, 0) -- Offset for the number GUI
local teleportVerticalOffset = Vector3.new(0, 3, 0) -- Height adjustment for TP target
local raycastDistance = 6
local maxRedPlatforms = 3 -- Maximum number of red platforms allowed

local player = game.Players.LocalPlayer
local camera = workspace.CurrentCamera

-- Simplified UI Setup & Functions --
local function destroyAllRedPlatforms()
    for i = #redPlatforms, 1, -1 do
        local pd = redPlatforms[i]
        if pd.hitPartDestroyConn then
            pd.hitPartDestroyConn:Disconnect()
            pd.hitPartDestroyConn = nil
        end
        if pd and pd.part and pd.part.Parent then
            pcall(function() pd.part:Destroy() end) -- Arrow will be destroyed as it's a child
        end
    end
    redPlatforms = {}
    if uiListLayout and platformScrollingFrame and platformScrollingFrame.Parent then
        platformScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
        for _, c in ipairs(platformScrollingFrame:GetChildren()) do
            if c:IsA("Frame") and c.Name:match("^PlatformEntry_") then
                pcall(function() c:Destroy() end)
            elseif not c:IsA("UIListLayout") then
                pcall(function() c:Destroy() end)
            end
        end
    end
end

local function destroyAdditionalGuiElements()
    if uiListLayoutConnection then
        uiListLayoutConnection:Disconnect()
        uiListLayoutConnection = nil
    end
    if additionalGuiInstance then
        pcall(function() additionalGuiInstance:Destroy() end)
    end
    additionalGuiInstance = nil
    additionalFrame = nil
    platformScrollingFrame = nil
    uiListLayout = nil
end

local function destroyAllGuisAndPlatform()
    destroyAllRedPlatforms()
    destroyAdditionalGuiElements()
    if positionConnection then
        positionConnection:Disconnect()
        positionConnection = nil
    end
    if screenGui then
        pcall(function() screenGui:Destroy() end)
    end
end

-- Main Frame Buttons
local buttonWidthG1 = 50
local buttonHeightG1 = 30
local buttonSpacingG1 = 10
local totalButtonWidthG1 = (buttonWidthG1 * 3) + (buttonSpacingG1 * 2)
local startXG1 = (200 - totalButtonWidthG1) / 2
local startYG1 = 20

local additionalButton = Instance.new("TextButton", frame)
additionalButton.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
additionalButton.Size = UDim2.new(0, 100, 0, 30)
additionalButton.Position = UDim2.new(0.5, -50, 0, startYG1)
additionalButton.Text = "Additional"
additionalButton.TextScaled = true

local destroyButton = Instance.new("TextButton", frame)
destroyButton.BackgroundColor3 = Color3.fromRGB(220, 220, 220)
destroyButton.Size = UDim2.new(0, 160, 0, 30)
destroyButton.Position = UDim2.new(0, 20, 0, 60)
destroyButton.Text = "Destroy All"
destroyButton.TextScaled = true


-- Platform list entry creation function
local function createPlatformListEntry(platformData)
    if not platformData or not platformData.part then return nil end

    local targetPlatformPart = platformData.part
    local platformNumber = platformData.number
    local isDetached = platformData.isDetached

    local entryFrame = Instance.new("Frame")
    entryFrame.Name = "PlatformEntry_" .. platformNumber
    entryFrame.BackgroundColor3 = isDetached and Color3.fromRGB(255, 100, 100) or Color3.fromRGB(210, 210, 210)
    entryFrame.BorderSizePixel = 1
    entryFrame.Size = UDim2.new(1, -10, 0, 25)

    local entryLayout = Instance.new("UIListLayout", entryFrame)
    entryLayout.FillDirection = Enum.FillDirection.Horizontal
    entryLayout.Padding = UDim.new(0, 5)
    entryLayout.VerticalAlignment = Enum.VerticalAlignment.Center

    local entryLabel = Instance.new("TextLabel", entryFrame)
    entryLabel.Name = "EntryLabel"
    entryLabel.Size = UDim2.new(0.7, -5, 1, 0)
    entryLabel.BackgroundTransparency = 1
    entryLabel.Text = "Platform " .. platformNumber
    entryLabel.Font = Enum.Font.SourceSans
    entryLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
    entryLabel.TextXAlignment = Enum.TextXAlignment.Left
    entryLabel.TextScaled = true

    local tpButton = Instance.new("TextButton", entryFrame)
    tpButton.Name = "TeleportButton"
    tpButton.Size = UDim2.new(0.3, -5, 0.9, 0)
    tpButton.BackgroundColor3 = Color3.fromRGB(0, 150, 255)
    tpButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    tpButton.Text = "TP"
    tpButton.TextScaled = true
    tpButton.Font = Enum.Font.SourceSansBold

    tpButton.MouseButton1Click:Connect(function()
        local char = player.Character
        local playerHrp = char and char:FindFirstChild("HumanoidRootPart")
        if playerHrp and targetPlatformPart and targetPlatformPart.Parent then
            local targetY = targetPlatformPart.Position.Y + teleportVerticalOffset.Y
            local platformTopY = targetPlatformPart.Position.Y + targetPlatformPart.Size.Y/2
            local minPlayerY = platformTopY + playerHrp.Size.Y/2 + 0.1
            local finalY = math.max(targetY, minPlayerY)

            playerHrp.CFrame = CFrame.new(Vector3.new(
                targetPlatformPart.Position.X,
                finalY,
                targetPlatformPart.Position.Z
            ))
        end
    end)

    return entryFrame
end

-- Full platform population function
local function populatePlatformList()
    if not platformScrollingFrame or not platformScrollingFrame.Parent then return end

    for _, child in ipairs(platformScrollingFrame:GetChildren()) do
        if child:IsA("Frame") and child.Name:match("^PlatformEntry_") then
            child:Destroy()
        end
    end

    for _, platformData in ipairs(redPlatforms) do
        if platformData.part and platformData.part.Parent then
            local entryUI = createPlatformListEntry(platformData)
            if entryUI then
                entryUI.Parent = platformScrollingFrame
            end
        end
    end
end

-- Complete spawnRedPlatform implementation - ADDED ARROW INDICATOR
local function spawnRedPlatform()
    if #redPlatforms >= maxRedPlatforms then
        warn("Cannot spawn more than " .. maxRedPlatforms .. " platforms.")
        return
    end

    local char = player.Character
    local hrp = char and char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    local platformNumber = #redPlatforms + 1
    local hitPart = nil
    local weldConstraint = nil

    local rayOrigin = hrp.Position + Vector3.new(0, 1, 0)
    local rayDirection = Vector3.new(0, -raycastDistance, 0)
    local raycastParams = RaycastParams.new()
    raycastParams.FilterType = Enum.RaycastFilterType.Exclude
    raycastParams.FilterDescendantsInstances = {char}

    local rayResult = workspace:Raycast(rayOrigin, rayDirection, raycastParams)
    if rayResult then
        hitPart = rayResult.Instance
    end

    local newPlatform = Instance.new("Part")
    newPlatform.Name = "RedPlatform_" .. platformNumber
    newPlatform.Size = Vector3.new(3, 1, 3)
    newPlatform.Color = Color3.fromRGB(255, 0, 0)
    newPlatform.Material = Enum.Material.Plastic
    newPlatform.CanCollide = false

    if hitPart then
        local platformCF = hitPart.CFrame * CFrame.new(0, hitPart.Size.Y/2 + newPlatform.Size.Y/2, 0)
        newPlatform.CFrame   = platformCF
        newPlatform.Orientation = hitPart.Orientation
        newPlatform.Anchored = false
    else
        newPlatform.Position = hrp.Position + redPlatformBaseOffset
        newPlatform.Anchored = true
    end
    newPlatform.Parent = workspace

    -- Create orientation arrow
    local arrow = Instance.new("WedgePart")
    arrow.Name = "OrientationArrow"
    arrow.Size = Vector3.new(0.5, 0.2, 1) -- Width (X), Height (Y), Length (Z, pointy end)
    arrow.Color = Color3.fromRGB(255, 255, 0) -- Yellow
    arrow.Material = Enum.Material.Neon -- Make it stand out
    arrow.CanCollide = false
    arrow.Anchored = false -- Will be welded
    arrow.TopSurface = Enum.SurfaceType.Smooth
    arrow.BottomSurface = Enum.SurfaceType.Smooth
    arrow.Parent = newPlatform -- Parent to the platform

    -- Position the arrow on top of the platform, pointing along the platform's local +Z axis.
    -- The arrow's base (center of its X,Y plane at its local Z= -Length/2) will be slightly forward from the platform's center.
    local arrowOffsetY = newPlatform.Size.Y/2 + arrow.Size.Y/2 -- Place arrow on top of platform
    local arrowOffsetZ = arrow.Size.Z/2 -- Position arrow's center so its back is at platform's center Z
                                        -- This makes it point from center towards +Z edge.

    -- The WedgePart points along its own +Z axis.
    -- We set its CFrame relative to the newPlatform's CFrame.
    arrow.CFrame = newPlatform.CFrame * CFrame.new(0, arrowOffsetY, arrowOffsetZ)

    -- Weld the arrow to the platform
    local arrowWeld = Instance.new("WeldConstraint")
    arrowWeld.Part0 = newPlatform
    arrowWeld.Part1 = arrow
    arrowWeld.Parent = arrow -- Or newPlatform, doesn't matter much for WeldConstraints

    -- Create number display
    local bbGui = Instance.new("BillboardGui", newPlatform)
    bbGui.Name = "NumberGui"
    bbGui.Adornee = newPlatform
    bbGui.AlwaysOnTop = true
    bbGui.Size = UDim2.new(1.5, 0, 0.6, 0)
    bbGui.StudsOffset = redPlatformNumberOffset -- Positioned above the platform's center

    local numLabel = Instance.new("TextLabel", bbGui)
    numLabel.Size = UDim2.new(1, 0, 1, 0)
    numLabel.BackgroundTransparency = 1
    numLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    numLabel.TextScaled = true
    numLabel.Text = tostring(platformNumber)
    numLabel.Font = Enum.Font.SourceSansBold

    if hitPart then
        weldConstraint = Instance.new("WeldConstraint", newPlatform)
        weldConstraint.Part0 = newPlatform
        weldConstraint.Part1 = hitPart
    end

    local platformData = {
        part = newPlatform,
        billboardGui = bbGui,
        weld = weldConstraint,
        number = platformNumber,
        isDetached = (hitPart == nil),
        hitPartDestroyConn = nil,
        arrowPart = arrow -- Store reference if needed, though not strictly necessary for cleanup
    }

    if hitPart then
        platformData.hitPartDestroyConn = hitPart.Destroying:Connect(function()
            if newPlatform and newPlatform.Parent then
                newPlatform.Anchored = true
                platformData.isDetached = true
                if platformScrollingFrame and platformScrollingFrame.Parent then
                    local entry = platformScrollingFrame:FindFirstChild("PlatformEntry_" .. platformNumber)
                    if entry then
                        entry.BackgroundColor3 = Color3.fromRGB(255, 100, 100)
                    end
                end
            end
        end)
    end

    table.insert(redPlatforms, platformData)

    if additionalFrame and additionalFrame.Parent then
        populatePlatformList()
    end
end

-- Complete removeLastRedPlatform implementation
local function removeLastRedPlatform()
    if #redPlatforms == 0 then return end

    local lastPlatformData = redPlatforms[#redPlatforms]
    if lastPlatformData.hitPartDestroyConn then
        lastPlatformData.hitPartDestroyConn:Disconnect()
        lastPlatformData.hitPartDestroyConn = nil
    end

    if lastPlatformData.part and lastPlatformData.part.Parent then
        pcall(function() lastPlatformData.part:Destroy() end) -- Arrow will be destroyed as it's a child
    end

    table.remove(redPlatforms, #redPlatforms)

     if additionalFrame and additionalFrame.Parent then
        if platformScrollingFrame then
            local entry = platformScrollingFrame:FindFirstChild("PlatformEntry_" .. lastPlatformData.number)
            if entry then
                pcall(function() entry:Destroy() end)
            end
        end
    end
end


-- Additional Button Logic
local function updateAdditionalGuiPosition()
    if additionalFrame and additionalFrame.Parent and frame then
        local ny = frame.AbsolutePosition.Y + frame.AbsoluteSize.Y
        local nx = frame.AbsolutePosition.X
        additionalFrame.Position = UDim2.fromOffset(nx, ny)
        additionalFrame.Size = frame.Size
    end
end

positionConnection = frame:GetPropertyChangedSignal("AbsolutePosition"):Connect(updateAdditionalGuiPosition)

additionalButton.MouseButton1Click:Connect(function()
    if additionalGuiInstance and additionalGuiInstance.Parent then
        destroyAdditionalGuiElements()
        additionalButton.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
    else
        additionalGuiInstance = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
        additionalGuiInstance.Name = "AdditionalScreenGui"
        additionalGuiInstance.ResetOnSpawn = false
        additionalGuiInstance.DisplayOrder = screenGui.DisplayOrder - 1

        additionalFrame = Instance.new("Frame", additionalGuiInstance)
        additionalFrame.Name = "AdditionalFrame"
        additionalFrame.BackgroundColor3 = Color3.fromRGB(190, 190, 190)
        additionalFrame.Size = frame.Size
        additionalFrame.BorderSizePixel = frame.BorderSizePixel
        additionalFrame.Active = true
        additionalFrame.Draggable = false

        updateAdditionalGuiPosition()

        local pad = 10
        local btnH = 30
        local btnW = (frame.Size.X.Offset - pad * 3) / 2
        local btnY = frame.Size.Y.Offset - btnH - pad
        local scrollH = btnY - pad * 2

        local posBtn = Instance.new("TextButton", additionalFrame)
        posBtn.Name = "PositiveButton"
        posBtn.Size = UDim2.new(0, btnW, 0, btnH)
        posBtn.Position = UDim2.new(0, pad, 0, btnY)
        posBtn.BackgroundColor3 = Color3.fromRGB(0, 200, 0)
        posBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
        posBtn.Text = "Positive (+)"
        posBtn.TextScaled = true
        posBtn.MouseButton1Click:Connect(spawnRedPlatform)

        local negBtn = Instance.new("TextButton", additionalFrame)
        negBtn.Name = "NegativeButton"
        negBtn.Size = UDim2.new(0, btnW, 0, btnH)
        negBtn.Position = UDim2.new(0, pad + btnW + pad, 0, btnY)
        negBtn.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
        negBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
        negBtn.Text = "Negative (-)"
        negBtn.TextScaled = true
        negBtn.MouseButton1Click:Connect(removeLastRedPlatform)

        platformScrollingFrame = Instance.new("ScrollingFrame", additionalFrame)
        platformScrollingFrame.Name = "PlatformListScroll"
        platformScrollingFrame.Size = UDim2.new(1, -pad * 2, 0, scrollH)
        platformScrollingFrame.Position = UDim2.new(0, pad, 0, pad)
        platformScrollingFrame.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
        platformScrollingFrame.BorderSizePixel = 1
        platformScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
        platformScrollingFrame.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
        platformScrollingFrame.ScrollBarThickness = 8
        platformScrollingFrame.ScrollingDirection = Enum.ScrollingDirection.Y

        uiListLayout = Instance.new("UIListLayout", platformScrollingFrame)
        uiListLayout.Padding = UDim.new(0, 5)
        uiListLayout.FillDirection = Enum.FillDirection.Vertical
        uiListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        uiListLayout.SortOrder = Enum.SortOrder.LayoutOrder

        uiListLayoutConnection = uiListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            if platformScrollingFrame then
                platformScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, uiListLayout.AbsoluteContentSize.Y)
            end
        end)

        populatePlatformList()
        additionalButton.BackgroundColor3 = Color3.fromRGB(200, 120, 0)
    end
end)

destroyButton.MouseButton1Click:Connect(destroyAllGuisAndPlatform)

if frame then
    frame.Destroying:Connect(function()
        if positionConnection then
            positionConnection:Disconnect()
            positionConnection = nil
        end
        destroyAllGuisAndPlatform()
    end)
end

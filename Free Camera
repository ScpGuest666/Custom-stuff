-- Create Main ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
screenGui.ResetOnSpawn = false

-- Create Main Frame (GUI 1)
local frame = Instance.new("Frame")
frame.Parent = screenGui
frame.BackgroundColor3 = Color3.fromRGB(180, 180, 180); frame.Size = UDim2.new(0, 200, 0, 150)
frame.Position = UDim2.new(0.5, -100, 0.5, -75); frame.Active = true; frame.Draggable = true

-- Platform Variables
local movablePlatform = nil; local isMovableActive = false

-- Additional GUI Variables
local additionalGuiInstance = nil; local additionalFrame = nil; local platformScrollingFrame = nil
local uiListLayout = nil; local uiListLayoutConnection = nil; local positionConnection = nil

-- Red Platform Variables
local redPlatforms = {}      -- Table: { part, billboardGui, weld, number, wasWelded, isDetached, hitPartDestroyConn }
local redPlatformBaseOffset = Vector3.new(0, -3, 0) -- Spawn below feet
local redPlatformNumberOffset = Vector3.new(0, 1.5, 0)
local raycastDistance = 6

local player = game.Players.LocalPlayer
local camera = workspace.CurrentCamera
local forwardGui = nil; local tweenService = game:GetService("TweenService"); local currentTween = nil
local movementSpeed = 10; local runService = game:GetService("RunService"); local renderSteppedConnection = nil

-- Simplified UI Setup & Functions --
local speedControlsYPos=100; local speedLabelWidth=100; local buttonWidthUI=30; local frameWidthG1=200; local speedLabelXPos=(frameWidthG1-speedLabelWidth)/2; local plusButtonXPos=speedLabelXPos-buttonWidthUI; local minusButtonXPos=speedLabelXPos+speedLabelWidth
local plusButton = Instance.new("TextButton", frame); plusButton.BackgroundColor3=Color3.fromRGB(150,150,150); plusButton.Size=UDim2.new(0,buttonWidthUI,0,30); plusButton.Position=UDim2.new(0,plusButtonXPos,0,speedControlsYPos); plusButton.Text="+"; plusButton.TextScaled=true
local minusButton = Instance.new("TextButton", frame); minusButton.BackgroundColor3=Color3.fromRGB(150,150,150); minusButton.Size=UDim2.new(0,buttonWidthUI,0,30); minusButton.Position=UDim2.new(0,minusButtonXPos,0,speedControlsYPos); minusButton.Text="-"; minusButton.TextScaled=true
local speedTextBox = Instance.new("TextBox", frame); speedTextBox.BackgroundColor3=Color3.fromRGB(200,200,200); speedTextBox.Size=UDim2.new(0,speedLabelWidth,0,30); speedTextBox.Position=UDim2.new(0,speedLabelXPos,0,speedControlsYPos); speedTextBox.Text="Speed: "..tostring(movementSpeed); speedTextBox.TextScaled=true; speedTextBox.ClearTextOnFocus=false; speedTextBox.PlaceholderText="Enter speed"
local function destroyMainPlatform() if movablePlatform then pcall(function() movablePlatform:Destroy() end); movablePlatform=nil end; isMovableActive=false; if renderSteppedConnection then renderSteppedConnection:Disconnect(); renderSteppedConnection=nil end; if forwardGui then pcall(function() forwardGui:Destroy() end); forwardGui=nil end; local c=player.Character; if c then local h=c:FindFirstChild("HumanoidRootPart"); local u=c:FindFirstChild("Humanoid"); if u or h then camera.CameraSubject=u or h end end end
local function destroyAllRedPlatforms() for i=#redPlatforms,1,-1 do local pd=redPlatforms[i]; if pd.hitPartDestroyConn then pd.hitPartDestroyConn:Disconnect(); pd.hitPartDestroyConn=nil end; if pd and pd.part and pd.part.Parent then pcall(function() pd.part:Destroy() end) end end; redPlatforms={}; if uiListLayout and platformScrollingFrame and platformScrollingFrame.Parent then platformScrollingFrame.CanvasSize=UDim2.new(0,0,0,0); for _,c in ipairs(platformScrollingFrame:GetChildren()) do if c:IsA("Frame") and c.Name:match("^PlatformEntry_") then pcall(function() c:Destroy() end) elseif not c:IsA("UIListLayout") then pcall(function() c:Destroy() end) end end end end
local function destroyAdditionalGuiElements() if uiListLayoutConnection then uiListLayoutConnection:Disconnect(); uiListLayoutConnection=nil end; if additionalGuiInstance then pcall(function() additionalGuiInstance:Destroy() end) end; additionalGuiInstance=nil; additionalFrame=nil; platformScrollingFrame=nil; uiListLayout=nil end
local function destroyAllGuisAndPlatform() destroyMainPlatform(); destroyAllRedPlatforms(); destroyAdditionalGuiElements(); if positionConnection then positionConnection:Disconnect(); positionConnection=nil end; if screenGui then pcall(function() screenGui:Destroy() end) end end
local function spawnMovablePlatform() local c=player.Character or player.CharacterAdded:Wait(); local h=c:FindFirstChild("HumanoidRootPart"); if not h then return false end; if movablePlatform then pcall(function() movablePlatform:Destroy() end); movablePlatform=nil end; movablePlatform=Instance.new("Part",workspace); movablePlatform.Name="MovablePlatform"; movablePlatform.Size=Vector3.new(3,1,3); movablePlatform.BrickColor=BrickColor.Green(); movablePlatform.Anchored=true; movablePlatform.CanCollide=false; movablePlatform.Transparency=0; movablePlatform.CFrame=CFrame.new(h.Position+Vector3.new(0,2.5,0)); camera.CameraSubject=movablePlatform; forwardGui=Instance.new("ScreenGui",player:WaitForChild("PlayerGui")); forwardGui.ResetOnSpawn=false; local ff=Instance.new("Frame",forwardGui); ff.Size=UDim2.new(0,140,0,70); ff.Position=UDim2.new(0,10,1,-90); local fb=Instance.new("TextButton",ff); fb.Size=UDim2.new(0.38,0,0.5,0); fb.Position=UDim2.new(0.31,0,0,0); fb.Text="F"; local bb=Instance.new("TextButton",ff); bb.Size=UDim2.new(0.38,0,0.5,0); bb.Position=UDim2.new(0.31,0,0.5,0); bb.Text="B"; local lb=Instance.new("TextButton",ff); lb.Size=UDim2.new(0.3,0,1,0); lb.Position=UDim2.new(0,0,0,0); lb.Text="L"; local rb=Instance.new("TextButton",ff); rb.Size=UDim2.new(0.3,0,1,0); rb.Position=UDim2.new(0.7,0,0,0); rb.Text="R"; local tr=0; renderSteppedConnection=runService.RenderStepped:Connect(function() if not movablePlatform or not isMovableActive or not movablePlatform.Parent then if renderSteppedConnection then renderSteppedConnection:Disconnect(); renderSteppedConnection=nil end; return end; local cm=camera.CFrame; tr=math.atan2(cm.RightVector.X,cm.RightVector.Z); movablePlatform.CFrame=CFrame.new(movablePlatform.Position)*CFrame.Angles(0,tr,0); local d=(movablePlatform.Position-cm.Position).Magnitude; movablePlatform.Transparency=d<=10 and 1 or 0 end); local function moveP(d) if not isMovableActive or not movablePlatform or not movablePlatform.Parent then return end; local dv={f=camera.CFrame.LookVector,b=-camera.CFrame.LookVector,r=camera.CFrame.RightVector,l=-camera.CFrame.RightVector}; local o=dv[d:sub(1,1)]*movementSpeed; local tc=CFrame.new(movablePlatform.Position+o)*CFrame.Angles(0,tr,0); if currentTween then currentTween:Cancel() end; local ti=TweenInfo.new(0.4,Enum.EasingStyle.Quad,Enum.EasingDirection.Out); currentTween=tweenService:Create(movablePlatform,ti,{CFrame=tc}); currentTween:Play(); camera.CameraSubject=movablePlatform end; fb.MouseButton1Click:Connect(function() moveP("f") end); bb.MouseButton1Click:Connect(function() moveP("b") end); rb.MouseButton1Click:Connect(function() moveP("r") end); lb.MouseButton1Click:Connect(function() moveP("l") end); return true end
local buttonWidthG1=50; local buttonHeightG1=30; local buttonSpacingG1=10; local totalButtonWidthG1=(buttonWidthG1*3)+(buttonSpacingG1*2); local startXG1=(frameWidthG1-totalButtonWidthG1)/2; local startYG1=20
local onButton=Instance.new("TextButton",frame); onButton.BackgroundColor3=Color3.fromRGB(0,255,0); onButton.Size=UDim2.new(0,buttonWidthG1,0,buttonHeightG1); onButton.Position=UDim2.new(0,startXG1,0,startYG1); onButton.Text="On"; onButton.TextScaled=true
local additionalButton=Instance.new("TextButton",frame); additionalButton.BackgroundColor3=Color3.fromRGB(255,165,0); additionalButton.Size=UDim2.new(0,buttonWidthG1,0,buttonHeightG1); additionalButton.Position=UDim2.new(0,startXG1+buttonWidthG1+buttonSpacingG1,0,startYG1); additionalButton.Text="Additional"; additionalButton.TextScaled=true
local offButton=Instance.new("TextButton",frame); offButton.BackgroundColor3=Color3.fromRGB(255,0,0); offButton.Size=UDim2.new(0,buttonWidthG1,0,buttonHeightG1); offButton.Position=UDim2.new(0,startXG1+(buttonWidthG1*2)+(buttonSpacingG1*2),0,startYG1); offButton.Text="Off"; offButton.TextScaled=true
local destroyButton=Instance.new("TextButton",frame); destroyButton.BackgroundColor3=Color3.fromRGB(220,220,220); destroyButton.Size=UDim2.new(0,160,0,30); destroyButton.Position=UDim2.new(0,20,0,60); destroyButton.Text="Destroy All"; destroyButton.TextScaled=true
local statusLabel=Instance.new("TextLabel",frame); statusLabel.BackgroundColor3=Color3.fromRGB(255,255,255); statusLabel.Size=UDim2.new(0,200,0,30); statusLabel.Position=UDim2.new(0,0,0,-30); statusLabel.Text="Status: Off"; statusLabel.TextColor3=Color3.fromRGB(255,0,0); statusLabel.TextScaled=true
local function updateAdditionalGuiPosition() if additionalFrame and additionalFrame.Parent and frame then local ny=frame.AbsolutePosition.Y+frame.AbsoluteSize.Y; local nx=frame.AbsolutePosition.X; additionalFrame.Position=UDim2.fromOffset(nx,ny); additionalFrame.Size=frame.Size end end
if frame then positionConnection = frame:GetPropertyChangedSignal("AbsolutePosition"):Connect(updateAdditionalGuiPosition); frame:GetPropertyChangedSignal("AbsoluteSize"):Connect(updateAdditionalGuiPosition) end

-- *** UPDATED HELPER FUNCTION: Creates UI entry, handles color based on detachment ***
local function createPlatformListEntry(platformData)
	if not platformData or not platformData.part then return nil end -- Need valid data

	local targetPlatformPart = platformData.part
	local platformNumber = platformData.number
	local isDetached = platformData.isDetached -- Check the flag

	local entryFrame = Instance.new("Frame")
	entryFrame.Name = "PlatformEntry_" .. platformNumber
	-- Set background color based on detachment status
	entryFrame.BackgroundColor3 = isDetached and Color3.fromRGB(255, 100, 100) or Color3.fromRGB(210, 210, 210) -- Red if detached
	entryFrame.BorderSizePixel = 1
	entryFrame.Size = UDim2.new(1, -10, 0, 25)

	local entryLayout = Instance.new("UIListLayout", entryFrame)
	entryLayout.FillDirection = Enum.FillDirection.Horizontal; entryLayout.Padding = UDim.new(0, 5); entryLayout.VerticalAlignment = Enum.VerticalAlignment.Center

	local entryLabel = Instance.new("TextLabel", entryFrame)
	entryLabel.Name = "EntryLabel"; entryLabel.Size = UDim2.new(0.7, -5, 1, 0); entryLabel.BackgroundTransparency = 1
	entryLabel.Text = "Platform " .. platformNumber; entryLabel.Font = Enum.Font.SourceSans; entryLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
	entryLabel.TextXAlignment = Enum.TextXAlignment.Left; entryLabel.TextScaled = false; entryLabel.TextSize = 14

	local tpButton = Instance.new("TextButton", entryFrame)
	tpButton.Name = "TeleportButton"; tpButton.Size = UDim2.new(0.3, -5, 0.9, 0); tpButton.BackgroundColor3 = Color3.fromRGB(0, 150, 255)
	tpButton.TextColor3 = Color3.fromRGB(255, 255, 255); tpButton.Text = "TP"; tpButton.TextScaled = true; tpButton.Font = Enum.Font.SourceSansBold

	tpButton.MouseButton1Click:Connect(function()
		local char = player.Character
		local playerHrp = char and char:FindFirstChild("HumanoidRootPart")

		if playerHrp and targetPlatformPart and targetPlatformPart.Parent then
			-- Teleport HRP center to be slightly above the platform's center Y
			-- Waist level approx HRP.Size.Y / 2
			local targetY = targetPlatformPart.Position.Y + playerHrp.Size.Y / 2 + 0.1 -- Aim for waist level on the platform
			local targetPosition = Vector3.new(targetPlatformPart.Position.X, targetY, targetPlatformPart.Position.Z)
			local targetCFrame = CFrame.new(targetPosition)
			playerHrp.CFrame = targetCFrame
			-- print("Teleported to Platform " .. platformNumber) -- Uncomment for debug
		else
			warn("Could not teleport: Player character or target platform (" .. platformNumber .. ") not found.")
		end
	end)

	return entryFrame
end

-- Function to populate the Scrolling list based on redPlatforms table
local function populatePlatformList()
	if not platformScrollingFrame or not platformScrollingFrame.Parent then return end
	for _, child in ipairs(platformScrollingFrame:GetChildren()) do if child:IsA("Frame") and child.Name:match("^PlatformEntry_") then pcall(function() child:Destroy() end) end end

	local platformsToRemoveIndices = {} -- Keep track of indices to remove if part is missing
	for i, platformData in ipairs(redPlatforms) do
		if platformData.part and platformData.part.Parent then
			local entryUI = createPlatformListEntry(platformData) -- Pass the whole data table
			if entryUI then entryUI.Parent = platformScrollingFrame end
		else
			warn("Platform part for number", platformData.number, "is missing during list population. Removing entry.")
			table.insert(platformsToRemoveIndices, i) -- Mark for removal
		end
	end

    -- Remove invalid entries (iterate backwards to avoid index issues)
    for i = #platformsToRemoveIndices, 1, -1 do
        local indexToRemove = platformsToRemoveIndices[i]
        if redPlatforms[indexToRemove].hitPartDestroyConn then
            redPlatforms[indexToRemove].hitPartDestroyConn:Disconnect() -- Disconnect listener if it exists
        end
        table.remove(redPlatforms, indexToRemove)
    end
end


-- Function to spawn a new Red Platform, attach it, and create its UI entry
local function spawnRedPlatform()
	local char = player.Character; local hrp = char and char:FindFirstChild("HumanoidRootPart"); if not hrp then warn("Cannot spawn Red Platform: No HRP."); return end
	local platformNumber = #redPlatforms + 1; local hitPart = nil; local weldConstraint = nil; local hitPartDestroyConn = nil
	local wasWelded = false; local isDetached = false -- Initialize flags

	local ro=hrp.Position+Vector3.new(0,1,0); local rd=Vector3.new(0,-raycastDistance,0); local rp=RaycastParams.new(); rp.FilterType=Enum.RaycastFilterType.Exclude; rp.FilterDescendantsInstances={char}; local rr=workspace:Raycast(ro,rd,rp)
	if rr then hitPart = rr.Instance end

	local newPlatform = Instance.new("Part", workspace); newPlatform.Name="RedPlatform_"..platformNumber; newPlatform.Size=Vector3.new(3,1,3); newPlatform.Color=Color3.fromRGB(255,0,0); newPlatform.Anchored=false; newPlatform.CanCollide=false; newPlatform.Material=Enum.Material.Plastic
	newPlatform.Position = hrp.Position + redPlatformBaseOffset -- Spawn below

	local bbGui = Instance.new("BillboardGui",newPlatform); bbGui.Name="NumberGui"; bbGui.Adornee=newPlatform; bbGui.AlwaysOnTop=true; bbGui.Size=UDim2.new(0,50,0,20); bbGui.StudsOffset=redPlatformNumberOffset
	local numLabel = Instance.new("TextLabel",bbGui); numLabel.Name="NumberLabel"; numLabel.Size=UDim2.new(1,0,1,0); numLabel.BackgroundTransparency=1; numLabel.TextColor3=Color3.fromRGB(255,255,255); numLabel.TextScaled=true; numLabel.Font=Enum.Font.SourceSansBold; numLabel.Text=tostring(platformNumber)

	-- Prepare platform data table BEFORE connecting signals
	local platformData = { part = newPlatform, billboardGui = bbGui, weld = nil, number = platformNumber, wasWelded = false, isDetached = false, hitPartDestroyConn = nil }

	if hitPart then
		weldConstraint = Instance.new("WeldConstraint", newPlatform); weldConstraint.Part0 = newPlatform; weldConstraint.Part1 = hitPart
		newPlatform.Anchored = false -- Ensure unanchored if welded
		platformData.weld = weldConstraint -- Update data table
		platformData.wasWelded = true     -- Mark that it was intended to be welded

		-- Connect to the hit part's destruction
		hitPartDestroyConn = hitPart.Destroying:Connect(function()
			-- Anchor the platform itself
			if platformData.part then platformData.part.Anchored = true end
			-- Mark as detached
			platformData.isDetached = true
			-- Update UI if visible
			if platformScrollingFrame and platformScrollingFrame.Parent then
				local entry = platformScrollingFrame:FindFirstChild("PlatformEntry_" .. platformData.number)
				if entry then entry.BackgroundColor3 = Color3.fromRGB(255, 100, 100) end -- Turn red
			end
            -- Clean up connection and weld reference in data
            if platformData.hitPartDestroyConn then platformData.hitPartDestroyConn:Disconnect(); platformData.hitPartDestroyConn = nil end
			platformData.weld = nil -- Weld is broken
			print("Platform " .. platformData.number .. " detached and anchored.")
		end)
		platformData.hitPartDestroyConn = hitPartDestroyConn -- Store connection in data table
	else
		newPlatform.Anchored = true -- Anchor if floating free
	end

	-- Add data to tracking table AFTER preparing it
	table.insert(redPlatforms, platformData)

	-- Create UI entry only if GUI 2 is currently open
	if platformScrollingFrame and platformScrollingFrame.Parent then
		local entryUI = createPlatformListEntry(platformData) -- Pass full data
		if entryUI then entryUI.Parent = platformScrollingFrame end
	end
end


-- Function to remove the last spawned Red Platform and its UI entry
local function removeLastRedPlatform()
	if #redPlatforms == 0 then print("No Red Platforms to remove."); return end
	local platformIndex = #redPlatforms; local platformDataToRemove = redPlatforms[platformIndex]; local platformNumber = platformDataToRemove.number
	-- Disconnect detachment listener FIRST
	if platformDataToRemove.hitPartDestroyConn then
		platformDataToRemove.hitPartDestroyConn:Disconnect()
		platformDataToRemove.hitPartDestroyConn = nil -- Clear reference
	end
	table.remove(redPlatforms); -- Remove from table
	if platformDataToRemove.part and platformDataToRemove.part.Parent then pcall(function() platformDataToRemove.part:Destroy() end) end -- Destroy 3D part
	if platformScrollingFrame and platformScrollingFrame.Parent then local entry=platformScrollingFrame:FindFirstChild("PlatformEntry_"..platformNumber); if entry then pcall(function() entry:Destroy() end) end end -- Destroy UI entry if visible
end

-- GUI 1 Control Connections - Simplified
local function updateSpeed() local t=speedTextBox.Text; local ns=string.match(t,"[%d%.]+"); local n=tonumber(ns); if n and n>=1 then movementSpeed=n else n=movementSpeed end; speedTextBox.Text="Speed: "..tostring(movementSpeed) end
speedTextBox.FocusLost:Connect(function(ep) if ep then updateSpeed() else speedTextBox.Text="Speed: "..tostring(movementSpeed) end end)
plusButton.MouseButton1Click:Connect(function() movementSpeed+=1; speedTextBox.Text="Speed: "..tostring(movementSpeed) end)
minusButton.MouseButton1Click:Connect(function() movementSpeed=math.max(1,movementSpeed-1); speedTextBox.Text="Speed: "..tostring(movementSpeed) end)
onButton.MouseButton1Click:Connect(function() if not isMovableActive then if spawnMovablePlatform() then isMovableActive=true; statusLabel.Text="Status: On"; statusLabel.TextColor3=Color3.fromRGB(0,255,0) end end end)
offButton.MouseButton1Click:Connect(function() if isMovableActive then destroyMainPlatform(); isMovableActive=false; statusLabel.Text="Status: Off"; statusLabel.TextColor3=Color3.fromRGB(255,0,0) end end)

-- Additional Button Logic (Toggle GUI 2, handles persistence)
additionalButton.MouseButton1Click:Connect(function()
	if additionalGuiInstance and additionalGuiInstance.Parent then destroyAdditionalGuiElements(); additionalButton.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
	else
		additionalGuiInstance=Instance.new("ScreenGui",player:WaitForChild("PlayerGui")); additionalGuiInstance.Name="AdditionalScreenGui"; additionalGuiInstance.ResetOnSpawn=false; additionalGuiInstance.DisplayOrder=screenGui.DisplayOrder-1
		additionalFrame=Instance.new("Frame",additionalGuiInstance); additionalFrame.Name="AdditionalFrame"; additionalFrame.BackgroundColor3=Color3.fromRGB(190,190,190); additionalFrame.Size=frame.Size; additionalFrame.BorderSizePixel=frame.BorderSizePixel; additionalFrame.Active=true; additionalFrame.Draggable=false
		local pad=10; local btnH=30; local btnW=(additionalFrame.AbsoluteSize.X-pad*3)/2; local btnY=additionalFrame.AbsoluteSize.Y-btnH-pad
		local posBtn=Instance.new("TextButton",additionalFrame); posBtn.Name="PositiveButton"; posBtn.Size=UDim2.new(0,btnW,0,btnH); posBtn.Position=UDim2.new(0,pad,0,btnY); posBtn.BackgroundColor3=Color3.fromRGB(0,200,0); posBtn.TextColor3=Color3.fromRGB(255,255,255); posBtn.Text="Positive (+)"; posBtn.TextScaled=true; posBtn.MouseButton1Click:Connect(spawnRedPlatform)
		local negBtn=Instance.new("TextButton",additionalFrame); negBtn.Name="NegativeButton"; negBtn.Size=UDim2.new(0,btnW,0,btnH); negBtn.Position=UDim2.new(0,pad+btnW+pad,0,btnY); negBtn.BackgroundColor3=Color3.fromRGB(200,0,0); negBtn.TextColor3=Color3.fromRGB(255,255,255); negBtn.Text="Negative (-)"; negBtn.TextScaled=true; negBtn.MouseButton1Click:Connect(removeLastRedPlatform)
		local scrollH=btnY-pad*2
		platformScrollingFrame=Instance.new("ScrollingFrame",additionalFrame); platformScrollingFrame.Name="PlatformListScroll"; platformScrollingFrame.Size=UDim2.new(1,-pad*2,0,scrollH); platformScrollingFrame.Position=UDim2.new(0,pad,0,pad); platformScrollingFrame.BackgroundColor3=Color3.fromRGB(200,200,200); platformScrollingFrame.BorderSizePixel=1; platformScrollingFrame.CanvasSize=UDim2.new(0,0,0,0); platformScrollingFrame.ScrollBarImageColor3=Color3.fromRGB(100,100,100); platformScrollingFrame.ScrollBarThickness=8; platformScrollingFrame.ScrollingDirection=Enum.ScrollingDirection.Y
		uiListLayout=Instance.new("UIListLayout",platformScrollingFrame); uiListLayout.Padding=UDim.new(0,5); uiListLayout.FillDirection=Enum.FillDirection.Vertical; uiListLayout.HorizontalAlignment=Enum.HorizontalAlignment.Center; uiListLayout.SortOrder=Enum.SortOrder.LayoutOrder
		uiListLayoutConnection=uiListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function() if platformScrollingFrame then platformScrollingFrame.CanvasSize=UDim2.new(0,0,0,uiListLayout.AbsoluteContentSize.Y) end end)

		populatePlatformList() -- Populate with existing platforms

		updateAdditionalGuiPosition(); additionalButton.BackgroundColor3 = Color3.fromRGB(200, 120, 0) -- Darker orange
	end
end)

destroyButton.MouseButton1Click:Connect(function() destroyAllGuisAndPlatform() end)

-- Safety check: Clean up if main frame is destroyed
if frame then frame.Destroying:Connect(function() if positionConnection then positionConnection:Disconnect(); positionConnection=nil end; destroyAllGuisAndPlatform() end) end -- Use full cleanup
